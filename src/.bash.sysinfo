#!/bin/bash

#
# Creates smoketest info comments
#

cd $HOME

# Call this with FH#9 reading a file known to exist
# If flock exists, we lock with that.  Otherwise we lock with a more
# portable method.
#
# FH#9 should go away when the shell exits.
getlock() {
    PROG="$1"
    if [ -x /usr/bin/flock ] ; then
        flock -n 9
        if [ $? -ne 0 ] ; then
            echo "Lock held by other process, exiting" 2>&1
            exit;
        fi
        return;
    fi

    LOCK=".lockdir-$PROG"
    if mkdir "$LOCK" >/dev/null 2>&1 ; then
        trap 'rmdir "$LOCK"' EXIT
        chmod 0 "$LOCK"  # Discourage edits
    else
        echo "Lock held by other process, exiting" 2>&1
        exit
    fi
}

if [ \! -d .cpanreporter ] ; then
    echo ".cpanreporter directory not found, exiting"
    exit;
fi

if [ \! -x /usr/bin/facter ] ; then
    echo "/usr/bin/facter not found, exiting"
    exit;
fi

(
    getlock bash.sysinfo

    if [ -e .cpanreporter/comment.head ] ; then
        echo "Heading found for comment"
        cat .cpanreporter/comment.head >.tmp.comment.$$
    else
        echo "No heading found, using default."
        echo "This report is from an automated smoke testing program and was not" >.tmp.comment.$$
        echo "reviewed by a human for accuracy." >>.tmp.comment.$$
    fi

    echo '' >>.tmp.comment.$$

    facter >.tmp.facter.$$

    CPU=$(    grep 'processor0 '             .tmp.facter.$$ 2>/dev/null | sed -e 's/^processor0 => //' )
    MEMORY=$( grep 'memorysize '             .tmp.facter.$$ 2>/dev/null | sed -e 's/^memorysize => //' )
    ARCH=$(   grep 'architecture '           .tmp.facter.$$ 2>/dev/null | sed -e 's/^architecture => //' )
    OS=$(     grep 'operatingsystem '        .tmp.facter.$$ 2>/dev/null | sed -e 's/^operatingsystem => //' )
    OSVER=$(  grep 'operatingsystemrelease ' .tmp.facter.$$ 2>/dev/null | sed -e 's/^operatingsystemrelease => //' )
    KERNEL=$( grep 'kernel '                 .tmp.facter.$$ 2>/dev/null | sed -e 's/^kernel => //' )
    KREL=$(   grep 'kernelrelease '          .tmp.facter.$$ 2>/dev/null | sed -e 's/^kernelrelease => //' )
    VIRT=$(    grep 'virtual '               .tmp.facter.$$ 2>/dev/null | sed -e 's/^virtual => //' )

    if [ -z "$CPU" ] ; then
        echo "CPU not found"
    else
        echo "CPU            : $CPU" >>.tmp.comment.$$
    fi
    
    if [ -z "$MEMORY" ] ; then
        echo "MEMORY not found"
    else
        echo "MEMORY         : $MEMORY" >>.tmp.comment.$$
    fi

    if [ -z "$ARCH" ] ; then
        echo "ARCH not found"
    else
        echo "ARCH           : $ARCH" >>.tmp.comment.$$
    fi
    
    if [ -z "$OS" -o -z "$OSVER" ] ; then
        echo "OS or OSVER not found"
    else
        echo "OS             : $OS $OSVER" >>.tmp.comment.$$
    fi
    
    if [ -z "$KERNEL" -o -z "$KREL" ] ; then
        echo "KERNEL / KREL not found"
    else
        echo "KERNEL         : $KERNEL $KREL" >>.tmp.comment.$$
    fi

    if [ -z "$VIRT" ] ; then
        echo "VIRT not found"
    else
        if [ "$VIRT" == 'physical' ] ; then
            VIRT='No Virtualization'
        fi
        echo "VIRTUALIZATION : $VIRT" >>.tmp.comment.$$
    fi
    
    rm .tmp.facter.$$
    mv .tmp.comment.$$ .cpanreporter/comment.txt
) 9<.bash.sysinfo

