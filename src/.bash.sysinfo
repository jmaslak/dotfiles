#!/bin/bash

#
# Creates smoketest info comments
#

cd $HOME

MAIN() {
    if [ \! -d .cpanreporter ] ; then
        echo ".cpanreporter directory not found, exiting"
        exit;
    fi

    if [ \( \! $( uname -s ) == 'Darwin' \) -a \( \! -x /usr/bin/facter \) ] ; then
        echo "/usr/bin/facter not found, not MacOS, exiting"
        exit;
    fi

    (
        getlock bash.sysinfo

        if [ $( uname -s ) == 'Darwin' ] ; then
            do_darwin
        else
            do_factor
        fi

        if [ -f .tmp.comment.$$ ] ; then
            # Should not exist
            rm .tmp.comment.$$
        fi

        touch .tmp.comment.$$

        if [ -e .cpanreporter/comment.head ] ; then
            echo "Heading found for comment"
            cat .cpanreporter/comment.head >>.tmp.comment.$$
            echo '' >>.tmp.comment.$$
        fi

        if [ -z "$CPU" ] ; then
            echo "CPU not found"
        else
            echo "CPU            : $CPU" >>.tmp.comment.$$
        fi
    
        if [ -z "$MEMORY" ] ; then
            echo "MEMORY not found"
        else
            echo "MEMORY         : $MEMORY" >>.tmp.comment.$$
        fi

        if [ -z "$ARCH" ] ; then
            echo "ARCH not found"
        else
            echo "ARCH           : $ARCH" >>.tmp.comment.$$
        fi
    
        if [ -z "$OS" -o -z "$OSVER" ] ; then
            echo "OS or OSVER not found"
        else
            echo "OS             : $OS $OSVER" >>.tmp.comment.$$
        fi
    
        if [ -z "$KERNEL" -o -z "$KREL" ] ; then
            echo "KERNEL / KREL not found"
        else
            echo "KERNEL         : $KERNEL $KREL" >>.tmp.comment.$$
        fi

        if [ -z "$VIRT" ] ; then
            echo "VIRT not found"
        else
            if [ "$VIRT" == 'physical' ] ; then
                VIRT='No Virtualization'
            fi
            echo "VIRTUALIZATION : $VIRT" >>.tmp.comment.$$
        fi
    
        mv .tmp.comment.$$ .cpanreporter/comment.txt
    ) 9<.bash.sysinfo

}

# Call this with FH#9 reading a file known to exist
# If flock exists, we lock with that.  Otherwise we lock with a more
# portable method.
#
# FH#9 should go away when the shell exits.
getlock() {
    PROG="$1"
    if [ -x /usr/bin/flock ] ; then
        flock -n 9
        if [ $? -ne 0 ] ; then
            echo "Lock held by other process, exiting" 2>&1
            exit;
        fi
        return;
    fi

    LOCK=".lockdir-$PROG"
    if mkdir "$LOCK" >/dev/null 2>&1 ; then
        trap 'rmdir "$LOCK"' EXIT
        chmod 0 "$LOCK"  # Discourage edits
    else
        echo "Lock held by other process, exiting" 2>&1
        exit
    fi
}

#
# Gather Mac system information
#
do_darwin () {
    CPU=$( sysctl -n machdep.cpu.brand_string )
    MEMORY="$(( ( $( sysctl -n hw.memsize ) + 512 * 1024 * 1024 ) \
                / ( 1024 * 1024 * 1024 ) )) GB"
    ARCH=$( uname -m )
    OS=$( sw_vers -productName )
    OSVER="$( sw_vers -productVersion ) build $( sw_vers -buildVersion )"
    KERNEL=$( uname -s )
    KREL=$( uname -r )
}

#
# Gather system information using facter (from Puppet)
#
do_factor () {

    facter >.tmp.facter.$$

    CPU=$(    grep 'processor0 '             .tmp.facter.$$ 2>/dev/null | sed -e 's/^processor0 => //' )
    MEMORY=$( grep 'memorysize '             .tmp.facter.$$ 2>/dev/null | sed -e 's/^memorysize => //' )
    ARCH=$(   grep 'architecture '           .tmp.facter.$$ 2>/dev/null | sed -e 's/^architecture => //' )
    OS=$(     grep 'operatingsystem '        .tmp.facter.$$ 2>/dev/null | sed -e 's/^operatingsystem => //' )
    OSVER=$(  grep 'operatingsystemrelease ' .tmp.facter.$$ 2>/dev/null | sed -e 's/^operatingsystemrelease => //' )
    KERNEL=$( grep 'kernel '                 .tmp.facter.$$ 2>/dev/null | sed -e 's/^kernel => //' )
    KREL=$(   grep 'kernelrelease '          .tmp.facter.$$ 2>/dev/null | sed -e 's/^kernelrelease => //' )
    VIRT=$(   egrep '^virtual '              .tmp.facter.$$ 2>/dev/null | sed -e 's/^virtual => //' )

    rm .tmp.facter.$$
}

MAIN
